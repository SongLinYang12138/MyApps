apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'


def config = rootProject.ext


android {

    compileSdkVersion 28

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.androidMinSdkVersion
        targetSdkVersion config.androidTargetSdkVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionCode 11
        versionName "1.0.0.4"
    }
//    暂时关闭databinding
    dataBinding {
        enabled = true;
    }

    signingConfigs {

        release {

            keyAlias '123456'
            keyPassword '123456'
            storeFile file('/ysltest.jks')
            storePassword '123456'
        }

        debug {

            keyAlias '123456'
            keyPassword '123456'
            storeFile file('/ysltest.jks')
            storePassword '123456'
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    applicationVariants.all {
//        variant  ->
//
//        variant .outputs.all{
//
//
//        }

        //判断是release还是debug版本
        def buildType = it.buildType.name
        def fileName
        //下面的channel是获取渠道号，你获取渠道号不一定会和我的代码一样，因为有可能你的渠道名称的规则和我的不一样，我的规则是${渠道名}-${applicationId},所以我是这样取的。
//            def channel = it.productFlavors[0].name.split("-")[0]
        //获取当前时间的"YYYY-MM-dd"格式。
        def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
        //只对Release包起作用，如果不是Release包则不变更输出路径，否则可能导致AS无法自动安装debug包。
//        if (buildType == "release") {
//            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks/${it.productFlavors[0].applicationId}/${createTime}")
//        }
        it.outputs.each {
            //只对Release包起作用，如果不是Release包则不变更名称。
            if (buildType == "release") {
                //我此处的命名规则是：渠道名_项目名_版本名_创建时间_构建类型.apk
                fileName = "PDA_${defaultConfig.versionName}_${createTime}-${buildType}.apk"
                //将名字打印出来，以便及时查看是否满意。
                println "文件名：-----------------${fileName}"
                //重新对apk命名。(适用于Gradle4.0以下版本)
                //it.outputFile = new File(it.outputFile.parent, fileName)
                //重新对apk命名。(适用于Gradle4.0（含）以上版本)如果你Gradle版本是4.0以下版本则将上面的一行代码放开并注释下面的这一行。
                it.outputFileName = fileName
            }
        }
    }


}

dependencies {
    def depend = config.appdependicens
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation depend.appcompat
    implementation depend.constraint
    //   retrofit
    implementation depend.scalars
    implementation depend.retrofitrxjava
    //   rxAndroid
    implementation depend.rxAndroid
    implementation depend.rxjava
    //   gosn
    implementation depend.gson
    //   等待框
    implementation depend.avi
    //   logger 查询日志框架
    implementation depend.logger
    implementation depend.supportdesign
    //    引入marterial design 风格的元素
    implementation depend.materialeditext
    implementation depend.materialDesign
    //    butterknife
    implementation depend.butterknife
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    annotationProcessor depend.butterKnifeCompiler
    implementation depend.annotations
    //    recycelerview
    implementation depend.recycelerview
    //    flexbox
    implementation depend.flebox
    // 图片轮播框架
    implementation project(':convenientbanner')
    //    安装apk的library
    implementation project(':installlibrary')
    implementation files('libs/commons-codec-1.11.jar')
}
repositories {
    mavenCentral()
}
